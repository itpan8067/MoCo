package de.htwg.moco.bulbdj.renderers;

import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Rect;

/**
 * Class displays the data as an canvas bar element.
 * The bars are oriented as a circle.
 *
 * @author Daniel Steidinger
 * @version 1.0
 */
public class BarGraphRenderer
{
    /**
     * The lines to draw.
     */
    protected float[] mFFTPoints;

    /**
     * The divisions for the count of lines to draw.
     */
    private int divisions;

    /**
     * Instance of {@Paint} class.
     */
    private Paint paint;

    /**
     * The radius of the circle to draw.
     */
    private int radius;

    /**
     * Default constructor.
     *
     * @param divisions the divisions for the count of lines to draw. Need to be a factor of 2.
     * @param paint the paint instance.
     * @param radius the radius of the circle to draw.
     */
    public BarGraphRenderer(int divisions, Paint paint, int radius)
    {
        super();
        this.divisions = divisions;
        this.paint = paint;
        this.radius = radius;
    }

    /**
     * Renders the raw fft data as a bar graph in a circle.
     * @param canvas the canvas element.
     * @param data the raw fft data.
     * @param rect the rect.
     */
    public void render(Canvas canvas, double[] data, Rect rect)
    {
        if (mFFTPoints == null || mFFTPoints.length < data.length * 4) {
            mFFTPoints = new float[data.length * 4];
        }
        // Example data
        //data = new double[]{0.3582763671875, 0.00347900390625, 0.20131173654735218, -0.20804678585409847, 0.5636712095844287, 0.4852574984399123, 0.0036133840069078453, -0.022684834715021345, 2.4166048127037207, 2.7895141032410535, 1.7579595099558758, 1.4336266779625633, -1.4850921098067835, -4.2723118128487245, 3.5155098260319413, 4.831643447507892, -1.1529617896248392, -3.2784292170590534, -4.449796179751502, 3.5375091038741404, 3.965278264657664, -6.3329881867237106, -3.406767010781675, 4.21795987335595, 0.4394616691892894, 3.8699568861546347, 7.320091733013629, 2.4749766798303248, 0.8498993152083405, 4.645440527085508, -0.9243231048307005, -0.42529415197725173, 6.4188098918502465, 2.0255793561497697, -3.4788547694312624, -8.481352470423065, -8.17184607899285, -3.2688688195823836, 2.128084509381731, 3.456689580281926, 4.777558368237621, -7.294475325549769, -10.60208409217266, 4.10003252097863, 9.37942229032236, -6.055579270289754, -3.9856049099282775, 6.689508399775654, -6.389094794713993, -0.4916170074248365, -1.3337466053038503, -8.183272794400652, 2.9204557309993078, -2.8168725985775844, 5.216533612705139, 3.043728322530958, -7.469353688654959, 4.033314549524898, -2.6667379071221284, 0.5567455542702304, 7.380893356712656, -2.4755531318365307, -0.507284368796473, -3.849303547565943, -0.8939706650563299, -2.667115104927384, -3.664390990127572, 3.0850995907811805, -0.8117546762862418, -2.4874701530814396, -1.9613368549628283, -5.869051448864789, -0.4295007520339884, -2.0833540352780995, 0.6012540708100345, -1.6866543645392302, 1.482920443083469, 0.6620175688747705, -0.6667291817416139, -1.2756416978416307, 0.1184495635797559, -0.5187513098658141, -0.854563543562131, 2.771262594064103, 3.3385730740371273, -0.38246896312207523, 2.054136337927442, 1.4335767243492705, 2.3862753499563762, -1.9445131255416928, 2.9162341938299727, 1.281364587443957, 1.7685636042723742, -1.854251364138228, 1.6177232931308025, -0.5688174933004437, 2.7576975047105505, -1.3688541004566075, 1.1626496115804477, -0.465425063663433, -2.0361297318042078, -0.7768411754385058, 0.3161837452909114, -0.9800123951880265, -1.1584069617830015, 1.487653650261029, 1.6351411422465738, -0.26899926777533334, 1.116891542282642, -2.1464931031451133, 0.9033079364233099, -0.07077727350905341, 0.09690521327234745, 0.05096987716830126, 0.22109178325680567, 0.27926113775737016, -0.9019431086057218, 0.6321716528446841, -0.8136084983988825, -0.17988205470806942, -0.23113034141919434, -0.006905891486025616, -0.25381429593846144, 0.8672297013042174, -0.17586188053126617, 0.27250933411094297, -0.025758539135254513, 1.3267227204749241, 0.499053955078125, -0.791168212890625, 0.07372059244376304, 1.6314033747670076, 0.708390638058064, 0.3855196183469847, -0.34645044269636066, 0.8077417589637534, -0.4648818975588659, 0.6638089841879222, 0.13618516334481245, 0.13941852755216808, 0.09503743156043973, 0.05970060894733109, 0.051860035891534415, 0.0197463636448909, -0.08277780394282062, -0.5435564052851551, 0.07689488508655523, 0.207070972421853, -0.08720146836460291, -0.32399157814912755, 0.5783394838755206, 0.4117671584902849, 0.12166251149346619, 0.20459968533797815, -0.004134930067416609, -0.629451334596258, 0.28714708322934035, -0.4510523431477815, 0.0937179742004599, 0.1946200794430692, 0.09516137589408746, 0.2142805276207207, -0.08733373264801472, -0.02129121012388313, 0.087585652055851, -0.027463504086679524, -0.012380723651831599, 0.10051758625837948, -0.04944002263862646, 0.08465497619059914, -0.3042244884260714, 0.12344758190595506, -0.2302127856043662, 0.2955741028895926, -0.27569916376833925, 0.33361314385499313, 0.14861924940009286, 0.07037058662877005, 0.209675102313084, 0.14742323494008902, 0.19676798806310247, 0.20502144345167994, 0.06746740307233057, -0.0025905449783036882, 0.07699443176610066, -0.10900644063786291, 0.09259103050082262, 0.01698972198034121, 0.11005462566608815, 0.029202067401330467, -0.0018441220900780042, 0.15716715486998067, 0.01774996193132994, 0.05987464116636576, -0.010985070941271768, 0.038323749213556524, 0.014547080309461613, 0.12684935898574645, 0.048563698957834744, 0.041741218791322865, -0.011266590954696287, 0.08242694388561489, 0.12955047336462022, 0.05293125346944594, -0.027210778307359407, -2.256814270437113E-4, 0.11123378875439283, 0.13036297532066543, 0.04253701207992, 0.07826265952092282, 0.035817457022499166, 0.02343203778670233, 0.09441760191713122, 0.011810399843313224, -0.04578797741169893, -0.04324311313372142, 0.0682263730472128, 0.12713010348413945, 0.023948337405126363, -0.09924215052743435, -0.056661152123024694, -0.05025162542700645, 0.10006098835992905, -0.015983104887082433, -0.10370002245488474, 7.140610209788179E-5, 0.07223862807868944, 0.062432520797193414, 0.07257206675361538, 0.09605737781236745, -0.051631710779560525, 0.017007279919733165, 0.04964735117761898, -0.029289150209596437, -0.1712132851683954, 0.04962703702503385, 0.1856993999197334, -0.04027478994515077, 0.07324392334058238, 0.03657223914038532, -0.09759461880046327, 0.129286645938665, 0.08827721905111041, 0.036364052058518226, -0.03326082850411982, -0.030828863689806862, 0.01356918512500549, 0.00718582713328364, 0.00440485622192649, 0.10497766114268314, 0.0011109556445944454, 0.017731400985229035, -0.02251223726265203, -0.012229454830766762, 0.008193747662166517, -0.1056376471715607};

        int limit = data.length / divisions;
        int width = rect.width();

        for (int i = 0; i < limit; i++) {
            double rfk = data[divisions * i];
            double ifk = data[divisions * i + 1];
            double magnitude = (rfk * rfk + ifk * ifk);
            int dbValueRaw = (int) (10 * Math.log10(magnitude));
            dbValueRaw += 30;               // Sensitivity. Lowest db Value is -30db.
            int dbValuePositive = Math.max(0, dbValueRaw);
            int maxDbValue = 80;            // Max Sensitivity is 50db.
            float dbValue = (float)dbValuePositive / maxDbValue * (width / 2 - radius);
            dbValue = Math.min(dbValue, width / 2 - radius);


            float angel = (float) (360.0 / limit) * i - 90;
            float startX = (float) (Math.cos(Math.toRadians(angel)) * radius + width / 2F);
            float startY = (float) (Math.sin(Math.toRadians(angel)) * radius + width / 2F);
            float endX = (float) (Math.cos(Math.toRadians(angel)) * (radius + (dbValue)) + width / 2F);
            float endY = (float) (Math.sin(Math.toRadians(angel)) * (radius + (dbValue)) + width / 2F);

            mFFTPoints[i * 4] = startX;
            mFFTPoints[i * 4 + 2] = endX;

            mFFTPoints[i * 4 + 1] = startY;
            mFFTPoints[i * 4 + 3] = endY;
        }

        canvas.drawLines(mFFTPoints, paint);
    }
}